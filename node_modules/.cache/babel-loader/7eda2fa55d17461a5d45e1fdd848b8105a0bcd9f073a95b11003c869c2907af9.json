{"ast":null,"code":"import emailjs from '@emailjs/browser';\n\n// EmailJS configuration\nconst EMAILJS_CONFIG = {\n  SERVICE_ID: process.env.REACT_APP_EMAILJS_SERVICE_ID || 'service_lebubvi',\n  // Замените на ваш Service ID из EmailJS\n  TEMPLATE_ID: process.env.REACT_APP_EMAILJS_TEMPLATE_ID || 'template_l2jcwnb',\n  // Замените на ваш Template ID из EmailJS\n  PUBLIC_KEY: process.env.REACT_APP_EMAILJS_PUBLIC_KEY || 'yUbQP4K87uPcCM6d4' // Замените на ваш Public Key из EmailJS\n};\n\n// Email recipients configuration\nconst EMAIL_RECIPIENTS = process.env.REACT_APP_EMAIL_RECIPIENTS ? process.env.REACT_APP_EMAIL_RECIPIENTS.split(',') : ['careers@driverconnect.com', 'hr@driverconnect.com'];\n\n// Initialize EmailJS\nemailjs.init(EMAILJS_CONFIG.PUBLIC_KEY);\n\n/**\r\n * Send form data via EmailJS\r\n * @param {Object} formData - Form data to send\r\n * @param {string} currentLanguage - Current language for email template\r\n * @returns {Promise} - EmailJS send promise\r\n */\nexport const sendFormEmail = async (formData, currentLanguage = 'ru') => {\n  try {\n    // Prepare email template parameters\n    const templateParams = {\n      // Basic form data\n      from_name: formData.name,\n      from_email: formData.email,\n      phone: formData.phone,\n      experience: formData.experience,\n      cdl_type: formData.cdlType,\n      message: formData.message,\n      // Additional info\n      language: currentLanguage,\n      submission_date: new Date().toLocaleString(),\n      // Email recipients (можете настроить в шаблоне EmailJS)\n      to_email: EMAIL_RECIPIENTS[0] || 'careers@driverconnect.com',\n      // Основной email\n      cc_email: EMAIL_RECIPIENTS[1] || 'hr@driverconnect.com',\n      // Копия для HR\n      recipients_list: EMAIL_RECIPIENTS.join(', '),\n      // Все получатели\n\n      // Subject line based on language\n      subject: getEmailSubject(currentLanguage),\n      // Formatted experience and CDL type for better readability\n      experience_text: formatExperience(formData.experience, currentLanguage),\n      cdl_type_text: formatCDLType(formData.cdlType, currentLanguage)\n    };\n\n    // Send email via EmailJS\n    const response = await emailjs.send(EMAILJS_CONFIG.SERVICE_ID, EMAILJS_CONFIG.TEMPLATE_ID, templateParams);\n    console.log('Email sent successfully:', response);\n    return {\n      success: true,\n      message: 'Email sent successfully',\n      response\n    };\n  } catch (error) {\n    console.error('Email sending failed:', error);\n    return {\n      success: false,\n      message: 'Failed to send email',\n      error: error.message\n    };\n  }\n};\n\n/**\r\n * Get email subject based on language\r\n */\nconst getEmailSubject = language => {\n  const subjects = {\n    ru: 'Новая заявка на работу - DriverConnect',\n    en: 'New Job Application - DriverConnect',\n    es: 'Nueva Solicitud de Empleo - DriverConnect'\n  };\n  return subjects[language] || subjects.ru;\n};\n\n/**\r\n * Format experience for email\r\n */\nconst formatExperience = (experience, language) => {\n  var _experienceLabels$lan;\n  const experienceLabels = {\n    ru: {\n      '0-1': '0-1 лет',\n      '2-5': '2-5 лет',\n      '6-10': '6-10 лет',\n      '10+': '10+ лет'\n    },\n    en: {\n      '0-1': '0-1 Years',\n      '2-5': '2-5 Years',\n      '6-10': '6-10 Years',\n      '10+': '10+ Years'\n    },\n    es: {\n      '0-1': '0-1 Años',\n      '2-5': '2-5 Años',\n      '6-10': '6-10 Años',\n      '10+': '10+ Años'\n    }\n  };\n  return ((_experienceLabels$lan = experienceLabels[language]) === null || _experienceLabels$lan === void 0 ? void 0 : _experienceLabels$lan[experience]) || experience;\n};\n\n/**\r\n * Format CDL type for email\r\n */\nconst formatCDLType = (cdlType, language) => {\n  var _cdlLabels$language;\n  const cdlLabels = {\n    ru: {\n      'class-a': 'Класс A',\n      'class-b': 'Класс B',\n      'class-c': 'Класс C',\n      'none': 'Нет CDL (Нужно обучение)'\n    },\n    en: {\n      'class-a': 'Class A',\n      'class-b': 'Class B',\n      'class-c': 'Class C',\n      'none': 'No CDL (Need Training)'\n    },\n    es: {\n      'class-a': 'Clase A',\n      'class-b': 'Clase B',\n      'class-c': 'Clase C',\n      'none': 'Sin CDL (Necesita Entrenamiento)'\n    }\n  };\n  return ((_cdlLabels$language = cdlLabels[language]) === null || _cdlLabels$language === void 0 ? void 0 : _cdlLabels$language[cdlType]) || cdlType;\n};\n\n/**\r\n * Send notification email to multiple recipients\r\n */\nexport const sendNotificationEmail = async (formData, recipients = []) => {\n  const emailList = recipients.length > 0 ? recipients : EMAIL_RECIPIENTS;\n  try {\n    const promises = emailList.map(email => sendFormEmail({\n      ...formData,\n      recipient_email: email\n    }));\n    const results = await Promise.allSettled(promises);\n    return {\n      success: true,\n      results,\n      sentTo: emailList\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};","map":{"version":3,"names":["emailjs","EMAILJS_CONFIG","SERVICE_ID","process","env","REACT_APP_EMAILJS_SERVICE_ID","TEMPLATE_ID","REACT_APP_EMAILJS_TEMPLATE_ID","PUBLIC_KEY","REACT_APP_EMAILJS_PUBLIC_KEY","EMAIL_RECIPIENTS","REACT_APP_EMAIL_RECIPIENTS","split","init","sendFormEmail","formData","currentLanguage","templateParams","from_name","name","from_email","email","phone","experience","cdl_type","cdlType","message","language","submission_date","Date","toLocaleString","to_email","cc_email","recipients_list","join","subject","getEmailSubject","experience_text","formatExperience","cdl_type_text","formatCDLType","response","send","console","log","success","error","subjects","ru","en","es","_experienceLabels$lan","experienceLabels","_cdlLabels$language","cdlLabels","sendNotificationEmail","recipients","emailList","length","promises","map","recipient_email","results","Promise","allSettled","sentTo"],"sources":["F:/driverconnect/src/services/emailService.js"],"sourcesContent":["import emailjs from '@emailjs/browser';\r\n\r\n// EmailJS configuration\r\nconst EMAILJS_CONFIG = {\r\n    SERVICE_ID: process.env.REACT_APP_EMAILJS_SERVICE_ID || 'service_lebubvi', // Замените на ваш Service ID из EmailJS\r\n    TEMPLATE_ID: process.env.REACT_APP_EMAILJS_TEMPLATE_ID || 'template_l2jcwnb', // Замените на ваш Template ID из EmailJS\r\n    PUBLIC_KEY: process.env.REACT_APP_EMAILJS_PUBLIC_KEY || 'yUbQP4K87uPcCM6d4' // Замените на ваш Public Key из EmailJS\r\n};\r\n\r\n// Email recipients configuration\r\nconst EMAIL_RECIPIENTS = process.env.REACT_APP_EMAIL_RECIPIENTS \r\n    ? process.env.REACT_APP_EMAIL_RECIPIENTS.split(',')\r\n    : ['careers@driverconnect.com', 'hr@driverconnect.com'];\r\n\r\n// Initialize EmailJS\r\nemailjs.init(EMAILJS_CONFIG.PUBLIC_KEY);\r\n\r\n/**\r\n * Send form data via EmailJS\r\n * @param {Object} formData - Form data to send\r\n * @param {string} currentLanguage - Current language for email template\r\n * @returns {Promise} - EmailJS send promise\r\n */\r\nexport const sendFormEmail = async (formData, currentLanguage = 'ru') => {\r\n    try {\r\n        // Prepare email template parameters\r\n        const templateParams = {\r\n            // Basic form data\r\n            from_name: formData.name,\r\n            from_email: formData.email,\r\n            phone: formData.phone,\r\n            experience: formData.experience,\r\n            cdl_type: formData.cdlType,\r\n            message: formData.message,\r\n            \r\n            // Additional info\r\n            language: currentLanguage,\r\n            submission_date: new Date().toLocaleString(),\r\n            \r\n            // Email recipients (можете настроить в шаблоне EmailJS)\r\n            to_email: EMAIL_RECIPIENTS[0] || 'careers@driverconnect.com', // Основной email\r\n            cc_email: EMAIL_RECIPIENTS[1] || 'hr@driverconnect.com', // Копия для HR\r\n            recipients_list: EMAIL_RECIPIENTS.join(', '), // Все получатели\r\n            \r\n            // Subject line based on language\r\n            subject: getEmailSubject(currentLanguage),\r\n            \r\n            // Formatted experience and CDL type for better readability\r\n            experience_text: formatExperience(formData.experience, currentLanguage),\r\n            cdl_type_text: formatCDLType(formData.cdlType, currentLanguage)\r\n        };\r\n\r\n        // Send email via EmailJS\r\n        const response = await emailjs.send(\r\n            EMAILJS_CONFIG.SERVICE_ID,\r\n            EMAILJS_CONFIG.TEMPLATE_ID,\r\n            templateParams\r\n        );\r\n\r\n        console.log('Email sent successfully:', response);\r\n        return {\r\n            success: true,\r\n            message: 'Email sent successfully',\r\n            response\r\n        };\r\n\r\n    } catch (error) {\r\n        console.error('Email sending failed:', error);\r\n        return {\r\n            success: false,\r\n            message: 'Failed to send email',\r\n            error: error.message\r\n        };\r\n    }\r\n};\r\n\r\n/**\r\n * Get email subject based on language\r\n */\r\nconst getEmailSubject = (language) => {\r\n    const subjects = {\r\n        ru: 'Новая заявка на работу - DriverConnect',\r\n        en: 'New Job Application - DriverConnect',\r\n        es: 'Nueva Solicitud de Empleo - DriverConnect'\r\n    };\r\n    return subjects[language] || subjects.ru;\r\n};\r\n\r\n/**\r\n * Format experience for email\r\n */\r\nconst formatExperience = (experience, language) => {\r\n    const experienceLabels = {\r\n        ru: {\r\n            '0-1': '0-1 лет',\r\n            '2-5': '2-5 лет',\r\n            '6-10': '6-10 лет',\r\n            '10+': '10+ лет'\r\n        },\r\n        en: {\r\n            '0-1': '0-1 Years',\r\n            '2-5': '2-5 Years',\r\n            '6-10': '6-10 Years',\r\n            '10+': '10+ Years'\r\n        },\r\n        es: {\r\n            '0-1': '0-1 Años',\r\n            '2-5': '2-5 Años',\r\n            '6-10': '6-10 Años',\r\n            '10+': '10+ Años'\r\n        }\r\n    };\r\n    return experienceLabels[language]?.[experience] || experience;\r\n};\r\n\r\n/**\r\n * Format CDL type for email\r\n */\r\nconst formatCDLType = (cdlType, language) => {\r\n    const cdlLabels = {\r\n        ru: {\r\n            'class-a': 'Класс A',\r\n            'class-b': 'Класс B',\r\n            'class-c': 'Класс C',\r\n            'none': 'Нет CDL (Нужно обучение)'\r\n        },\r\n        en: {\r\n            'class-a': 'Class A',\r\n            'class-b': 'Class B',\r\n            'class-c': 'Class C',\r\n            'none': 'No CDL (Need Training)'\r\n        },\r\n        es: {\r\n            'class-a': 'Clase A',\r\n            'class-b': 'Clase B',\r\n            'class-c': 'Clase C',\r\n            'none': 'Sin CDL (Necesita Entrenamiento)'\r\n        }\r\n    };\r\n    return cdlLabels[language]?.[cdlType] || cdlType;\r\n};\r\n\r\n/**\r\n * Send notification email to multiple recipients\r\n */\r\nexport const sendNotificationEmail = async (formData, recipients = []) => {\r\n    const emailList = recipients.length > 0 ? recipients : EMAIL_RECIPIENTS;\r\n    \r\n    try {\r\n        const promises = emailList.map(email => \r\n            sendFormEmail({ ...formData, recipient_email: email })\r\n        );\r\n        \r\n        const results = await Promise.allSettled(promises);\r\n        \r\n        return {\r\n            success: true,\r\n            results,\r\n            sentTo: emailList\r\n        };\r\n    } catch (error) {\r\n        return {\r\n            success: false,\r\n            error: error.message\r\n        };\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}