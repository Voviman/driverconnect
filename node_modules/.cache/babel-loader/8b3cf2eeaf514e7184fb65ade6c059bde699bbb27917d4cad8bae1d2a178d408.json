{"ast":null,"code":"import emailjs from '@emailjs/browser';\n\n// EmailJS configuration\nconst EMAILJS_CONFIG = {\n  SERVICE_ID: process.env.REACT_APP_EMAILJS_SERVICE_ID || 'service_lebubvi',\n  // Замените на ваш Service ID из EmailJS\n  TEMPLATE_ID: process.env.REACT_APP_EMAILJS_TEMPLATE_ID || 'template_l2jcwnb',\n  // Замените на ваш Template ID из EmailJS\n  PUBLIC_KEY: process.env.REACT_APP_EMAILJS_PUBLIC_KEY || 'yUbQP4K87uPcCM6d4' // Замените на ваш Public Key из EmailJS\n};\n\n// Email recipients configuration\nconst EMAIL_RECIPIENTS = process.env.REACT_APP_EMAIL_RECIPIENTS ? process.env.REACT_APP_EMAIL_RECIPIENTS.split(',') : ['jose@Driverconnect.com', 'sam@cdl4hire.com'];\n\n// Initialize EmailJS\nemailjs.init(EMAILJS_CONFIG.PUBLIC_KEY);\n\n/**\r\n * Send form data via EmailJS\r\n * @param {Object} formData - Form data to send\r\n * @param {string} currentLanguage - Current language for email template\r\n * @returns {Promise} - EmailJS send promise\r\n */\nexport const sendFormEmail = async (formData, currentLanguage = 'ru') => {\n  try {\n    // Validate EmailJS configuration\n    if (!EMAILJS_CONFIG.SERVICE_ID || !EMAILJS_CONFIG.TEMPLATE_ID || !EMAILJS_CONFIG.PUBLIC_KEY) {\n      throw new Error('EmailJS configuration is incomplete. Please check your Service ID, Template ID, and Public Key.');\n    }\n\n    // Prepare email template parameters\n    const templateParams = {\n      // Basic form data\n      from_name: formData.name,\n      from_email: formData.email,\n      phone: formData.phone,\n      experience: formData.experience,\n      cdl_type: formData.cdlType,\n      message: formData.message || 'Нет дополнительного сообщения',\n      // Additional info\n      language: currentLanguage,\n      submission_date: new Date().toLocaleString('ru-RU', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      }),\n      // Subject line based on language\n      subject: getEmailSubject(currentLanguage),\n      // Formatted experience and CDL type for better readability\n      experience_text: formatExperience(formData.experience, currentLanguage),\n      cdl_type_text: formatCDLType(formData.cdlType, currentLanguage),\n      // Recipients for template (используется в шаблоне EmailJS)\n      to_name: 'DriverConnect Team',\n      reply_to: formData.email\n    };\n    console.log('Sending email with params:', templateParams);\n\n    // Send email via EmailJS\n    const response = await emailjs.send(EMAILJS_CONFIG.SERVICE_ID, EMAILJS_CONFIG.TEMPLATE_ID, templateParams);\n    console.log('Email sent successfully:', response);\n    return {\n      success: true,\n      message: 'Email sent successfully',\n      response\n    };\n  } catch (error) {\n    console.error('Email sending failed:', error);\n    return {\n      success: false,\n      message: 'Failed to send email',\n      error: error.message\n    };\n  }\n};\n\n/**\r\n * Get email subject based on language\r\n */\nconst getEmailSubject = language => {\n  const subjects = {\n    ru: 'Новая заявка на работу - DriverConnect',\n    en: 'New Job Application - DriverConnect',\n    es: 'Nueva Solicitud de Empleo - DriverConnect'\n  };\n  return subjects[language] || subjects.ru;\n};\n\n/**\r\n * Format experience for email\r\n */\nconst formatExperience = (experience, language) => {\n  var _experienceLabels$lan;\n  const experienceLabels = {\n    ru: {\n      '0-1': '0-1 лет',\n      '2-5': '2-5 лет',\n      '6-10': '6-10 лет',\n      '10+': '10+ лет'\n    },\n    en: {\n      '0-1': '0-1 Years',\n      '2-5': '2-5 Years',\n      '6-10': '6-10 Years',\n      '10+': '10+ Years'\n    },\n    es: {\n      '0-1': '0-1 Años',\n      '2-5': '2-5 Años',\n      '6-10': '6-10 Años',\n      '10+': '10+ Años'\n    }\n  };\n  return ((_experienceLabels$lan = experienceLabels[language]) === null || _experienceLabels$lan === void 0 ? void 0 : _experienceLabels$lan[experience]) || experience;\n};\n\n/**\r\n * Format CDL type for email\r\n */\nconst formatCDLType = (cdlType, language) => {\n  var _cdlLabels$language;\n  const cdlLabels = {\n    ru: {\n      'class-a': 'Класс A',\n      'class-b': 'Класс B',\n      'class-c': 'Класс C',\n      'none': 'Нет CDL (Нужно обучение)'\n    },\n    en: {\n      'class-a': 'Class A',\n      'class-b': 'Class B',\n      'class-c': 'Class C',\n      'none': 'No CDL (Need Training)'\n    },\n    es: {\n      'class-a': 'Clase A',\n      'class-b': 'Clase B',\n      'class-c': 'Clase C',\n      'none': 'Sin CDL (Necesita Entrenamiento)'\n    }\n  };\n  return ((_cdlLabels$language = cdlLabels[language]) === null || _cdlLabels$language === void 0 ? void 0 : _cdlLabels$language[cdlType]) || cdlType;\n};\n\n/**\r\n * Send email to multiple recipients by calling EmailJS multiple times\r\n */\nexport const sendToMultipleRecipients = async (formData, currentLanguage = 'ru') => {\n  try {\n    const results = [];\n\n    // Отправляем на каждый email отдельно\n    for (const email of EMAIL_RECIPIENTS) {\n      try {\n        // Создаем отдельные параметры для каждого получателя\n        const templateParams = {\n          from_name: formData.name,\n          from_email: formData.email,\n          phone: formData.phone,\n          experience: formData.experience,\n          cdl_type: formData.cdlType,\n          message: formData.message,\n          language: currentLanguage,\n          submission_date: new Date().toLocaleString(),\n          subject: getEmailSubject(currentLanguage),\n          experience_text: formatExperience(formData.experience, currentLanguage),\n          cdl_type_text: formatCDLType(formData.cdlType, currentLanguage),\n          to_name: 'DriverConnect Team',\n          reply_to: formData.email,\n          recipient_email: email // Конкретный получатель\n        };\n        const response = await emailjs.send(EMAILJS_CONFIG.SERVICE_ID, EMAILJS_CONFIG.TEMPLATE_ID, templateParams);\n        results.push({\n          email,\n          success: true,\n          response\n        });\n      } catch (error) {\n        results.push({\n          email,\n          success: false,\n          error: error.message\n        });\n      }\n    }\n    const successCount = results.filter(r => r.success).length;\n    return {\n      success: successCount > 0,\n      results,\n      successCount,\n      totalRecipients: EMAIL_RECIPIENTS.length,\n      message: `Sent to ${successCount}/${EMAIL_RECIPIENTS.length} recipients`\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};","map":{"version":3,"names":["emailjs","EMAILJS_CONFIG","SERVICE_ID","process","env","REACT_APP_EMAILJS_SERVICE_ID","TEMPLATE_ID","REACT_APP_EMAILJS_TEMPLATE_ID","PUBLIC_KEY","REACT_APP_EMAILJS_PUBLIC_KEY","EMAIL_RECIPIENTS","REACT_APP_EMAIL_RECIPIENTS","split","init","sendFormEmail","formData","currentLanguage","Error","templateParams","from_name","name","from_email","email","phone","experience","cdl_type","cdlType","message","language","submission_date","Date","toLocaleString","year","month","day","hour","minute","subject","getEmailSubject","experience_text","formatExperience","cdl_type_text","formatCDLType","to_name","reply_to","console","log","response","send","success","error","subjects","ru","en","es","_experienceLabels$lan","experienceLabels","_cdlLabels$language","cdlLabels","sendToMultipleRecipients","results","recipient_email","push","successCount","filter","r","length","totalRecipients"],"sources":["F:/driverconnect/src/services/emailService.js"],"sourcesContent":["import emailjs from '@emailjs/browser';\r\n\r\n// EmailJS configuration\r\nconst EMAILJS_CONFIG = {\r\n    SERVICE_ID: process.env.REACT_APP_EMAILJS_SERVICE_ID || 'service_lebubvi', // Замените на ваш Service ID из EmailJS\r\n    TEMPLATE_ID: process.env.REACT_APP_EMAILJS_TEMPLATE_ID || 'template_l2jcwnb', // Замените на ваш Template ID из EmailJS\r\n    PUBLIC_KEY: process.env.REACT_APP_EMAILJS_PUBLIC_KEY || 'yUbQP4K87uPcCM6d4' // Замените на ваш Public Key из EmailJS\r\n};\r\n\r\n// Email recipients configuration\r\nconst EMAIL_RECIPIENTS = process.env.REACT_APP_EMAIL_RECIPIENTS \r\n    ? process.env.REACT_APP_EMAIL_RECIPIENTS.split(',')\r\n    : ['jose@Driverconnect.com', 'sam@cdl4hire.com'];\r\n\r\n// Initialize EmailJS\r\nemailjs.init(EMAILJS_CONFIG.PUBLIC_KEY);\r\n\r\n/**\r\n * Send form data via EmailJS\r\n * @param {Object} formData - Form data to send\r\n * @param {string} currentLanguage - Current language for email template\r\n * @returns {Promise} - EmailJS send promise\r\n */\r\nexport const sendFormEmail = async (formData, currentLanguage = 'ru') => {\r\n    try {\r\n        // Validate EmailJS configuration\r\n        if (!EMAILJS_CONFIG.SERVICE_ID || !EMAILJS_CONFIG.TEMPLATE_ID || !EMAILJS_CONFIG.PUBLIC_KEY) {\r\n            throw new Error('EmailJS configuration is incomplete. Please check your Service ID, Template ID, and Public Key.');\r\n        }\r\n\r\n        // Prepare email template parameters\r\n        const templateParams = {\r\n            // Basic form data\r\n            from_name: formData.name,\r\n            from_email: formData.email,\r\n            phone: formData.phone,\r\n            experience: formData.experience,\r\n            cdl_type: formData.cdlType,\r\n            message: formData.message || 'Нет дополнительного сообщения',\r\n            \r\n            // Additional info\r\n            language: currentLanguage,\r\n            submission_date: new Date().toLocaleString('ru-RU', {\r\n                year: 'numeric',\r\n                month: 'long', \r\n                day: 'numeric',\r\n                hour: '2-digit',\r\n                minute: '2-digit'\r\n            }),\r\n            \r\n            // Subject line based on language\r\n            subject: getEmailSubject(currentLanguage),\r\n            \r\n            // Formatted experience and CDL type for better readability\r\n            experience_text: formatExperience(formData.experience, currentLanguage),\r\n            cdl_type_text: formatCDLType(formData.cdlType, currentLanguage),\r\n            \r\n            // Recipients for template (используется в шаблоне EmailJS)\r\n            to_name: 'DriverConnect Team',\r\n            reply_to: formData.email\r\n        };\r\n\r\n        console.log('Sending email with params:', templateParams);\r\n\r\n        // Send email via EmailJS\r\n        const response = await emailjs.send(\r\n            EMAILJS_CONFIG.SERVICE_ID,\r\n            EMAILJS_CONFIG.TEMPLATE_ID,\r\n            templateParams\r\n        );\r\n\r\n        console.log('Email sent successfully:', response);\r\n        return {\r\n            success: true,\r\n            message: 'Email sent successfully',\r\n            response\r\n        };\r\n\r\n    } catch (error) {\r\n        console.error('Email sending failed:', error);\r\n        return {\r\n            success: false,\r\n            message: 'Failed to send email',\r\n            error: error.message\r\n        };\r\n    }\r\n};\r\n\r\n/**\r\n * Get email subject based on language\r\n */\r\nconst getEmailSubject = (language) => {\r\n    const subjects = {\r\n        ru: 'Новая заявка на работу - DriverConnect',\r\n        en: 'New Job Application - DriverConnect',\r\n        es: 'Nueva Solicitud de Empleo - DriverConnect'\r\n    };\r\n    return subjects[language] || subjects.ru;\r\n};\r\n\r\n/**\r\n * Format experience for email\r\n */\r\nconst formatExperience = (experience, language) => {\r\n    const experienceLabels = {\r\n        ru: {\r\n            '0-1': '0-1 лет',\r\n            '2-5': '2-5 лет',\r\n            '6-10': '6-10 лет',\r\n            '10+': '10+ лет'\r\n        },\r\n        en: {\r\n            '0-1': '0-1 Years',\r\n            '2-5': '2-5 Years',\r\n            '6-10': '6-10 Years',\r\n            '10+': '10+ Years'\r\n        },\r\n        es: {\r\n            '0-1': '0-1 Años',\r\n            '2-5': '2-5 Años',\r\n            '6-10': '6-10 Años',\r\n            '10+': '10+ Años'\r\n        }\r\n    };\r\n    return experienceLabels[language]?.[experience] || experience;\r\n};\r\n\r\n/**\r\n * Format CDL type for email\r\n */\r\nconst formatCDLType = (cdlType, language) => {\r\n    const cdlLabels = {\r\n        ru: {\r\n            'class-a': 'Класс A',\r\n            'class-b': 'Класс B',\r\n            'class-c': 'Класс C',\r\n            'none': 'Нет CDL (Нужно обучение)'\r\n        },\r\n        en: {\r\n            'class-a': 'Class A',\r\n            'class-b': 'Class B',\r\n            'class-c': 'Class C',\r\n            'none': 'No CDL (Need Training)'\r\n        },\r\n        es: {\r\n            'class-a': 'Clase A',\r\n            'class-b': 'Clase B',\r\n            'class-c': 'Clase C',\r\n            'none': 'Sin CDL (Necesita Entrenamiento)'\r\n        }\r\n    };\r\n    return cdlLabels[language]?.[cdlType] || cdlType;\r\n};\r\n\r\n/**\r\n * Send email to multiple recipients by calling EmailJS multiple times\r\n */\r\nexport const sendToMultipleRecipients = async (formData, currentLanguage = 'ru') => {\r\n    try {\r\n        const results = [];\r\n        \r\n        // Отправляем на каждый email отдельно\r\n        for (const email of EMAIL_RECIPIENTS) {\r\n            try {\r\n                // Создаем отдельные параметры для каждого получателя\r\n                const templateParams = {\r\n                    from_name: formData.name,\r\n                    from_email: formData.email,\r\n                    phone: formData.phone,\r\n                    experience: formData.experience,\r\n                    cdl_type: formData.cdlType,\r\n                    message: formData.message,\r\n                    language: currentLanguage,\r\n                    submission_date: new Date().toLocaleString(),\r\n                    subject: getEmailSubject(currentLanguage),\r\n                    experience_text: formatExperience(formData.experience, currentLanguage),\r\n                    cdl_type_text: formatCDLType(formData.cdlType, currentLanguage),\r\n                    to_name: 'DriverConnect Team',\r\n                    reply_to: formData.email,\r\n                    recipient_email: email // Конкретный получатель\r\n                };\r\n\r\n                const response = await emailjs.send(\r\n                    EMAILJS_CONFIG.SERVICE_ID,\r\n                    EMAILJS_CONFIG.TEMPLATE_ID,\r\n                    templateParams\r\n                );\r\n\r\n                results.push({\r\n                    email,\r\n                    success: true,\r\n                    response\r\n                });\r\n\r\n            } catch (error) {\r\n                results.push({\r\n                    email,\r\n                    success: false,\r\n                    error: error.message\r\n                });\r\n            }\r\n        }\r\n\r\n        const successCount = results.filter(r => r.success).length;\r\n        \r\n        return {\r\n            success: successCount > 0,\r\n            results,\r\n            successCount,\r\n            totalRecipients: EMAIL_RECIPIENTS.length,\r\n            message: `Sent to ${successCount}/${EMAIL_RECIPIENTS.length} recipients`\r\n        };\r\n\r\n    } catch (error) {\r\n        return {\r\n            success: false,\r\n            error: error.message\r\n        };\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}